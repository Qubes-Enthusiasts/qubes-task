#!/usr/bin/python3
# qubes-task-gui.py

# TODO following imports somehow needed for execution already built pyinstaller exe
from __future__ import print_function
import string
import xml.etree.ElementTree
import glob
import numbers
import asyncio
import ast
# TODO end of imports which are required by pyinstaller exe

import subprocess
import sys

import json
import shelve
import random

from unman_repo_installaton import tasks_repo, templates_repo

#Fix for QtWidgets
import PyQt5.QtWidgets as QtWidgets

import os

if os.uname()[1] != 'dom0':
    print("This script should be executed in dom0.")


# Following code ensure that pyinstaller exe use exact needed imports
def append_system_libs():
    # execute the "python3 -c 'import site; print(json.dumps(site.getsitepackages()))'" command and capture the output
    result = subprocess.run(["python3", "-c", "import site, json; print(json.dumps(site.getsitepackages()))"],
                            stdout=subprocess.PIPE)

    # extract the output from the result and parse it as JSON
    output = json.loads(result.stdout)
    # append each path to sys.path
    for path in output:
        sys.path.append(path)


def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)


# let's use all libraries from the client to ensure maximum compatibility
append_system_libs()

from PyQt5 import QtWidgets, QtGui, uic
from PyQt5.QtWidgets import (
    QWidget, QApplication, QButtonGroup, QHBoxLayout, QVBoxLayout,
    QCheckBox, QLabel, QLineEdit, QMainWindow, QPushButton, QScrollArea, QComboBox,
    QSizePolicy, QSpacerItem, QTabWidget, QStackedLayout, QMessageBox, QGridLayout)

from PyQt5.QtCore import QObject, Qt, pyqtSignal, QProcess, QTimer, QThread, QSize
from PyQt5.QtGui import QPainter, QFont, QColor, QPen, QPixmap
# from row import TaskRowWidget
from qubes_task import *
from qubesadmin.tools.qvm_template import Template as Task

from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QStyle

appl = qubesadmin.Qubes()
args = ['dict']
p_args, args = parser.parse_known_args(args)
p_args = parser.parse_args(args, p_args)
p_args.repo_files = REPO_FILE
p_args.updatevm = appl.updatevm

from qubesmanager import utils

overview = """<!DOCTYPE html>
<html>
<head>
<style>
    p {
        width: 60ch; /* Limit the width to around 80 characters */
        font-family: Arial, sans-serif;
        line-height: 1.5;
    }
</style>
</head>
<body>

<p>
Qubes OS is a high-security operating system that isolates various tasks for<br>
increased privacy and security. While it is designed with a security-first<br>
approach, it also caters to a niche of tech-savvy enthusiasts who value the<br>
ability to control and isolate various system tasks. Qubes' modularity allows<br>
for a flexible and customizable experience that these users greatly appreciate.<br>
</p>

<p>
The 3isec Qubes Templates Repository is a project created by this enthusiastic<br>
community that seeks to extend the capabilities of Qubes OS and make it more<br>
accessible to a broader user base.<br>
</p>

<p>
The project consists of three main parts:<br>
</p>

<ol>
<li><strong>Qubes Tasks:</strong> These are Salt tasks created by the contributor known as<br>
unman. Salt is a Python-based, open-source configuration management software<br>
and remote execution engine. In the context of Qubes OS, Salt tasks are used for<br>
system configuration, simplifying the setup and management of Qubes. Unman's<br>
tasks contribute to automating various system setup processes, making it easier<br>
for both newcomers and experienced users.<br>
</li>
<li><strong>Qubes Templates:</strong> Unman also contributes to the creation of Qubes templates.<br>
Templates in Qubes OS define the root filesystems that are shared by multiple<br>
qubes (VMs). By developing and sharing these templates, unman provides users<br>
with more options for their system configurations, enabling greater customization<br>
and versatility.<br>
</li>
<li><strong>Windows Installation:</strong> This component is developed by eliotclick. Windows qubes<br>
are a highly requested feature in Qubes OS as it allows users to run Windows<br>
applications in a more secure manner. Eliotclick's contribution makes it easier<br>
to install and use Windows within Qubes, extending the system's compatibility<br>
and making it more accessible to users who rely on Windows software.<br>
</li>
</ol>

<p>
This project showcases the vibrant enthusiast community around Qubes OS. It's<br>
important to note that while Qubes is fundamentally a security-oriented<br>
operating system, its appeal extends beyond that due to its unique structure and<br>
design. Enthusiast users not only use Qubes OS but also contribute to its<br>
development and refinement.<br>
</p>

<p>
The enthusiast community plays a vital role in popularizing Qubes OS, testing<br>
new features, contributing code, and providing valuable feedback. They also help<br>
in funding the project through donations, ensuring its ongoing development. It's<br>
a symbiotic relationship that helps Qubes OS grow and evolve while providing<br>
enthusiast users with an operating system that aligns with their values of<br>
privacy, security, and control.<br>
</p>

<p>
However, it's also important to note that modifying Qubes OS, such as by<br>
installing additional software into dom0 (the administrative domain), can<br>
potentially weaken its security. Qubes' security model is based on the principle<br>
of least privilege, and dom0 is intentionally isolated and limited in its<br>
network access. Enthusiast users should be aware of the potential risks involved<br>
in such modifications and weigh them against the benefits. A risk-managed<br>
approach, understanding the potential implications and taking steps to mitigate<br>
them, is crucial. In spite of this, the contributions of enthusiast users have<br>
proven invaluable in enriching the ecosystem and making Qubes OS more resilient<br>
and robust.<br>
</p>

</body>
</html>

"""


def random_string(length):
    result = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
    return result


class LiveShellDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.liveShell = QtWidgets.QTextEdit(self)
        self.liveShell.setReadOnly(True)

        # Set the default size of the QTextEdit widget
        self.liveShell.setMinimumSize(800, 600)

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.liveShell)

        self.process = QProcess(self)
        self.process.setProcessChannelMode(QProcess.MergedChannels)
        self.process.readyRead.connect(self.on_ready_read)
        self.process.finished.connect(self.on_finished)

    def on_ready_read(self):
        text = self.process.readAll().data().decode()
        self.liveShell.moveCursor(QtGui.QTextCursor.End)

        # Check if the output is a progress bar update
        if text.startswith('\r'):
            # Move the cursor one line up and to the beginning of the line
            cursor = self.liveShell.textCursor()
            cursor.movePosition(QtGui.QTextCursor.Up, QtGui.QTextCursor.MoveAnchor)
            cursor.movePosition(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.MoveAnchor)
            self.liveShell.setTextCursor(cursor)

            # Remove the current progress line
            cursor = self.liveShell.textCursor()
            cursor.select(QtGui.QTextCursor.LineUnderCursor)
            cursor.removeSelectedText()
            self.liveShell.setTextCursor(cursor)

            # Insert the new progress text
            self.liveShell.insertPlainText(text.lstrip('\r'))

        else:
            self.liveShell.insertPlainText(text)

    def on_finished(self, exit_code):
        self.process.close()
        self.liveShell.append(f"Process finished with exit code {exit_code}.")

    def run_script(self, scripts):
        if not isinstance(scripts, str):  # some of installations send string TODO ;
            sc = ""
            for script in scripts:
                sc = sc + script["script"]
            scripts = sc
        print(scripts)
        self.process.start("bash", ["-c", scripts])


def get_step(script, run_on_fail):
    return {
        "script": script,
        "run_on_fail": run_on_fail
    }


class TaskRowWidget(QWidget):

    def __init__(self, parent, name, summary):
        super(TaskRowWidget, self).__init__()
        self.parent = parent
        self.name = name  # Name of widget used for searching.
        self.summary = summary
        self.is_on = False

        self.setAccessibleName = name
        self.lbl2 = QLabel(self.summary)
        self.checked = QCheckBox(self.name)
        parent.taskGroup.addButton(self.checked)
        self.btn_details = QPushButton("Details")
        self.btn_details.setAccessibleName(name)
        self.btn_details.setCheckable(False)
        self.btn_details.clicked.connect(parent.details_clicked)

        self.hbox = QHBoxLayout()
        self.hbox.addWidget(self.checked, 20)
        self.hbox.addWidget(self.lbl2, 60)
        self.hbox.addWidget(self.btn_details)
        self.setLayout(self.hbox)


class SudoCommandConfirm(QMessageBox):
    def __init__(self, script, *args, **kwargs):
        QMessageBox.__init__(self, *args, **kwargs)
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        self.content = QWidget()
        scroll.setWidget(self.content)
        lay = QVBoxLayout(self.content)
        lay.addWidget(QLabel(script, self))

        # self.setIcon(QMessageBox.Question)
        confirmationIcon = QApplication.style().standardIcon(QStyle.SP_MessageBoxQuestion)
        confirmationPixmap = confirmationIcon.pixmap(confirmationIcon.actualSize(QSize(64, 64)))
        confirmationLblIcon = QLabel(self)
        confirmationLblIcon.setPixmap(confirmationPixmap)
        self.layout().addWidget(confirmationLblIcon, 0, 0, 1, 1)
        self.setWindowTitle("Confirmation")
        sudoLbl = QLabel("This action will run following code with \"sudo\".")
        sudoLbl.setAlignment(Qt.AlignLeft)
        sudoLblFont = sudoLbl.font()  # get the current font
        sudoLblFont.setBold(True)  # make font bold
        sudoLbl.setFont(sudoLblFont)
        self.layout().addWidget(sudoLbl, 0, 1, 1,
                                self.layout().columnCount())
        self.layout().addWidget(scroll, 1, 0, 1, self.layout().columnCount())
        self.setStyleSheet("QScrollArea{min-width:300 px; min-height: 400px}")


def _translate(locale, field):
    translations = {
        'ru': {
            'please chose installation': 'пожалуйста выберите версию',
            'Install windows': 'установить виндовс',
            'Installation:': 'Версия:',
            'Worker template:': 'Рабочая машина:',
            'Net vm:': 'Сетевая машина:',
            'Name:': 'Название:',
        },
        'es': {
            'please chose installation': 'por favor elige version',
            'Install windows': 'instalar windows',
            'Installation:': 'Version:',
            'Worker template:': 'Template:',
            'Net vm:': 'Red vm:',
            'Name:': 'Nombre vm:',
        }
    }
    # enforce all language in brute way for now
    for iLocale in translations:
        try:
            translations[iLocale][field]
        except Exception as e:
            raise f"Locale {iLocale} not contain translation for field {field}; caused exception {str(e)}"

    if locale == 'en':
        return field
    return translations[locale][field]


class Worker(QThread):
    finished = pyqtSignal(dict)

    def run(self):
        try:
            tsks = list_tasks(p_args, appl, 'dict')
        except  Exception as e:
            tsks = {"exception": str(e)}
        self.finished.emit(tsks)


class MainWindow(QMainWindow):
    fancy_directory = os.path.expanduser("~/.qubes-fancy-task")
    fancy_state_path = os.path.join(fancy_directory, 'state')

    def __init__(self, command='dict', *args, **kwargs):
        super().__init__()

        # create qubes-fancy-task directory
        os.makedirs(self.fancy_directory, exist_ok=True)

        # Tabs
        self.tabWidget = QTabWidget()
        self.tabOverview = QWidget()
        self.tabTasks = QWidget()
        self.tabTemplate = QWidget()
        self.tabWindows = QWidget()

        # Add tabs to the tab widget
        self.tabWidget.addTab(self.tabOverview, "Overview")
        self.tabWidget.addTab(self.tabTasks, "Tasks")
        self.tabWidget.addTab(self.tabTemplate, "Templates")
        self.tabWidget.addTab(self.tabWindows, "Windows")

        self.tabOverview.setLayout(self.render_overview_tab())
        self.tabTemplate.setLayout(self.render_template_tab())
        self.tabTasks.setLayout(self.render_tasks_tab())
        self.tabWindows.setLayout(self.render_windows_installation())

        self.setCentralWidget(self.tabWidget)

        self.setGeometry(600, 100, 900, 600)
        self.setWindowTitle('Qubes Task Manager')
        self.setWindowIcon = QtGui.QIcon.fromTheme("qubes-manager")

    def checkbox_state_changed(self, state):
        if state == 0:
            self.set_update_on_start(False)
        elif state == 2:
            self.set_update_on_start(True)

    def render_windows_installation(self):
        currentLocale = 'en'
        # Tab templates
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(12, 12, 12, 12)
        self.gridLayout.setHorizontalSpacing(12)
        self.gridLayout.setVerticalSpacing(9)
        self.gridLayout.setObjectName("gridLayout")

        self.btn_install_windows = QPushButton(_translate(currentLocale, "Install windows"))
        self.btn_install_windows.setCheckable(False)
        self.btn_install_windows.clicked.connect(self.windows_install)

        self.nameWind = QtWidgets.QLineEdit()
        self.nameWind.setObjectName("nameWindQube")

        self.workerTempateBox = QComboBox()
        utils.initialize_widget_with_default(
            widget=self.workerTempateBox,
            choices=[(vm.name, vm) for vm in appl.domains
                     if vm.klass == 'TemplateVM'],
            add_none=True,
            add_qubes_default=True,
            default_value=getattr(appl, 'default_dispvm', None))

        self.colorLabelWindowsVMBox = QComboBox()
        utils.initialize_widget_with_labels(
            widget=self.colorLabelWindowsVMBox,
            qubes_app=appl)

        self.netvmBox = QComboBox()
        utils.initialize_widget_with_default(
            widget=self.netvmBox,
            choices=[(vm.name, vm) for vm in appl.domains
                     if not utils.is_internal(vm) and
                     getattr(vm, 'provides_network', False)],
            add_none=True,
            add_qubes_default=True,
            default_value=getattr(appl, 'default_netvm', None))

        self.windowsInstallation = [
            ("win10x64-ltsc-eval", "win10x64-ltsc-eval", "windows", "win10x64-ltsc-eval.png")
        ]
        self.default_inst = "please chose installation"
        type_list = []
        for inst in self.windowsInstallation:
            type_list.append((self.tr(inst[0]), inst[1]))
        self.windowsInstallationBox = QComboBox()
        utils.initialize_widget(widget=self.windowsInstallationBox,
                                choices=type_list,
                                selected_value=_translate(currentLocale, self.default_inst),
                                add_current_label=False)

        self.installation_name_label = QLabel()
        self.gridLayout.addWidget(self.installation_name_label, 2, 1, 1, 1)
        self.gridLayout.addWidget(self.nameWind, 2, 3, 1, 2)
        self.gridLayout.addWidget(self.colorLabelWindowsVMBox, 2, 6, 1, 1)

        self.worker_select_label = QLabel()
        self.gridLayout.addWidget(self.worker_select_label, 3, 1, 1, 1)
        self.gridLayout.addWidget(self.workerTempateBox, 3, 3, 1, 1)

        self.netvm_select_label = QLabel()
        self.gridLayout.addWidget(self.netvm_select_label, 4, 1, 1, 1)
        self.gridLayout.addWidget(self.netvmBox, 4, 3, 1, 1)

        self.version_select_label = QLabel()
        self.gridLayout.addWidget(self.version_select_label, 6, 1, 1, 1)
        self.gridLayout.addWidget(self.windowsInstallationBox, 6, 3, 1, 1)
        self.gridLayout.addWidget(self.btn_install_windows, 7, 3, 1, 1)

        self.retranslateUi(currentLocale)

        return self.gridLayout

    # simple mock to set translations;
    def retranslateUi(self, locale):
        # _translate = QtCore.QCoreApplication.translate

        self.version_select_label.setText(_translate(locale, "Installation:"))
        self.installation_name_label.setText(_translate(locale, "Name:"))
        self.worker_select_label.setText(_translate(locale, "Worker template:"))
        self.netvm_select_label.setText(_translate(locale, "Net vm:"))

    def render_tasks_tab(self):
        reponame = "tasks"

        self.taskContainerLayout = QStackedLayout()
        self.taskContainerLayout.addWidget(self.render_tasks())
        self.taskContainerLayout.addWidget(
            self.render_installation_tab(tasks_repo, lambda: self.taskContainerLayout.setCurrentIndex(2)))
        self.taskContainerLayout.addWidget(self.refresh_widget())

        if tasks_repo.is_installed():
            self.taskContainerLayout.setCurrentIndex(2)
            if self.update_on_start():
                self.refresh_on_start_checkbox1.hide()
                self.refresh_tasks()
        else:
            self.taskContainerLayout.setCurrentIndex(1)
        return self.taskContainerLayout

    def render_overview_tab(self):
        # Tab overview
        v_layout_overview = QVBoxLayout()
        label = QLabel(overview)
        scroll = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()
        scroll_layout.addWidget(label)
        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        v_layout_overview.addWidget(scroll)
        return v_layout_overview

    def render_template_tab(self):

        taskContainerLayout = QStackedLayout()
        taskContainerLayout.addWidget(self.render_templates_tab())
        taskContainerLayout.addWidget(
            self.render_installation_tab(templates_repo, lambda: taskContainerLayout.setCurrentIndex(0)))

        if templates_repo.is_installed():
            taskContainerLayout.setCurrentIndex(0)
        else:
            taskContainerLayout.setCurrentIndex(1)
        return taskContainerLayout

    def render_templates_tab(self):
        # Tab templates
        v_layout_templates = QVBoxLayout()

        # Load the image into QPixmap
        pixmap = QPixmap(resource_path("media/QVM-TEMPLATE-GUI.png"))
        template_instruction = QLabel()
        template_instruction.setPixmap(pixmap)

        # List all files in the directory
        directory = resource_path("media/templates")
        files = os.listdir(directory)
        installation_icons = QWidget()
        hIconLayout = QHBoxLayout()

        for file in files:
            # Check if the file is an image (you can add other formats if needed)
            if file.endswith(".png") or file.endswith(".jpg") or file.endswith(".jpeg"):
                # Create the full file path
                filepath = os.path.join(directory, file)

                # Load the image into QPixmap
                pixmap = QPixmap(filepath)

                # Scale pixmap
                pixmap = pixmap.scaled(45, 45)

                # Create a QLabel and set the QPixmap to it
                label = QLabel()
                label.setPixmap(pixmap)

                # Add label to the layout
                hIconLayout.addWidget(label)

        installation_icons.setLayout(hIconLayout)
        v_layout_templates.addWidget(installation_icons)

        label_qvm_template_gui = QLabel("Look for i3sec templates in repository column ")
        v_layout_templates.addWidget(label_qvm_template_gui)
        v_layout_templates.addWidget(template_instruction)

        btn_go_to_qvm_template_gui = QPushButton("Go to qvm-template-gui")
        font = btn_go_to_qvm_template_gui.font()  # get the current font
        font.setBold(True)  # make font bold
        btn_go_to_qvm_template_gui.setFont(font)  # set the modified font
        btn_go_to_qvm_template_gui.setStyleSheet(
            'QPushButton {background-color: green; color: white;}')
        btn_go_to_qvm_template_gui.setCheckable(False)
        btn_go_to_qvm_template_gui.clicked.connect(self.go_to_qvm_template_gui)
        v_layout_templates.addWidget(btn_go_to_qvm_template_gui)
        installStackWidget = QWidget()
        installStackWidget.setLayout(v_layout_templates)
        return installStackWidget

    def render_installation_tab(self, repo, setCurrentIndex):
        waring_widget = QWidget()
        warning_HLayout = QHBoxLayout()
        warning_icon = QApplication.style().standardIcon(QStyle.SP_MessageBoxWarning)
        warning_pixmap = warning_icon.pixmap(warning_icon.actualSize(QSize(64, 64)))
        warning_label_icon = QLabel(self)
        warning_label_icon.setPixmap(warning_pixmap)
        warning_HLayout.addWidget(warning_label_icon)
        warning_label = QLabel(f"The {repo.reponame} repository is not installed")
        warning_label.setAlignment(Qt.AlignLeft)
        warning_label_font = warning_label.font()  # get the current font
        warning_label_font.setPointSize(warning_label_font.pointSize() * 2)  # make font 4 times larger
        warning_label_font.setBold(True)  # make font bold
        warning_label.setFont(warning_label_font)
        warning_HLayout.addWidget(warning_label)

        instruction_label = QLabel(
            f"The official instruction from UNMAN about how to install the {repo.reponame} repository")

        instruction_description_scroll = QScrollArea()
        instruction_description_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        instruction_description_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        instruction_description_scroll.setWidgetResizable(True)
        instruction_description_scroll.setWidget(QLabel(repo.instructions))

        # Create QPushButton instances for OK and Cancel
        installation_button = QPushButton("OR you can set up it automatically (will run subcomands with \"sudo\")")
        font = installation_button.font()  # get the current font
        font.setBold(True)  # make font bold
        installation_button.setFont(font)  # set the modified font
        installation_button.setStyleSheet(
            'QPushButton {background-color: yellow; color: black;}')  # set the button to yellow

        def accept():
            script = repo.get_script()
            msgBox = SudoCommandConfirm(script)
            msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                process = subprocess.Popen(['sudo', 'python3', '-c', script],
                                           stdin=subprocess.PIPE,
                                           universal_newlines=True)
                process.communicate()
                setCurrentIndex()

        # Connect buttons to the appropriate slots (functions)
        installation_button.clicked.connect(accept)

        # Add the QLabel and QPushButtons to the layout
        installStackLayout = QVBoxLayout()

        waring_widget.setLayout(warning_HLayout)

        installStackLayout.addWidget(waring_widget)
        installStackLayout.addWidget(instruction_label)
        installStackLayout.addWidget(instruction_description_scroll, 40)
        installStackLayout.addWidget(installation_button)
        installStackWidget = QWidget()
        installStackWidget.setLayout(installStackLayout)
        return installStackWidget

    def render_tasks(self):
        # Tab tasks
        self.tasksLayout = QVBoxLayout()  # Tasks container layout.
        self.taskGroup = QButtonGroup()
        self.taskGroup.setExclusive(False)
        spacer = QSpacerItem(1, 1, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.tasks = QWidget()
        self.tasksLayout.addItem(spacer)
        self.tasks.setLayout(self.tasksLayout)
        self.lbl = QLabel(""" Description
                            """)
        self.lbl.setAlignment(Qt.AlignTop)
        # Scroll Area Properties.
        self.scroll = QScrollArea()
        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.tasks)

        self.scroll2 = QScrollArea()
        self.scroll2.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll2.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll2.setWidgetResizable(True)
        self.scroll2.setWidget(self.lbl)

        self.searchbar = QLineEdit()
        self.btn_install = QPushButton("Install")
        self.btn_install.setCheckable(False)
        self.btn_install.clicked.connect(self.install_tasks)

        self.refresh_on_start_checkbox2 = QCheckBox("Refresh tasks on start")
        self.refresh_on_start_checkbox2.setChecked(self.update_on_start())
        self.refresh_on_start_checkbox2.stateChanged.connect(
            self.checkbox_state_changed)  # Connect the signal to the slot

        taskStackLayout = QVBoxLayout()
        # containerLayout.addWidget(self.searchbar)
        taskStackLayout.addWidget(self.btn_install)
        taskStackLayout.addWidget(self.refresh_on_start_checkbox2)
        taskStackLayout.addWidget(self.scroll, 60)
        taskStackLayout.addWidget(self.scroll2, 40)
        taskStackWidget = QWidget()
        taskStackWidget.setLayout(taskStackLayout)
        return taskStackWidget

    def go_to_qvm_template_gui(self):
        subprocess.Popen(["qvm-template-gui"], start_new_session=True)

    def refresh_widget(self):
        # Tab tasks
        self.default_refresh_text = """ Update can take time in case of weak connection or if sys-whonix not started\n"""
        self.lbl = QLabel(self.default_refresh_text)
        self.lbl.setAlignment(Qt.AlignTop)
        self.lbl.hide()
        self.refresh_counter = 1

        self.refresh_on_start_checkbox1 = QCheckBox("Refresh tasks on start")
        self.refresh_on_start_checkbox1.setChecked(self.update_on_start())
        self.refresh_on_start_checkbox1.stateChanged.connect(
            self.checkbox_state_changed)  # Connect the signal to the slot

        self.btn_refresh = QPushButton("Pull tasks; can take time if sys-whonix not started")
        self.btn_refresh.setCheckable(False)
        self.btn_refresh.clicked.connect(self.refresh_tasks)

        refreshStackLayout = QVBoxLayout()
        refreshStackLayout.addWidget(self.btn_refresh)
        refreshStackLayout.addWidget(self.lbl)
        refreshStackLayout.addWidget(self.refresh_on_start_checkbox1)
        refreshStackWidget = QWidget()
        refreshStackWidget.setLayout(refreshStackLayout)
        return refreshStackWidget

    def finish_refresh(self, results):
        self.outputs = {}
        self.outputs = results
        if "exception" in self.outputs:
            QtWidgets.QMessageBox.warning(
                self,
                self.tr("EXCEPTION"),
                self.tr(f"Happened exception during tasks refresh {self.outputs['exception']}\n PLEASE TRY AGAIN"))
            self.btn_refresh.show()
            self.lbl.hide()
        else:
            self.widget_names = self.outputs.keys()
            for name in self.widget_names:
                detail = self.outputs[name]['summary']
                item = TaskRowWidget(self, name, detail)
                self.tasksLayout.addWidget(item)
            self.taskContainerLayout.setCurrentIndex(0)
        self.refresh_timer.stop()

    def refresh_tasks(self):
        self.btn_refresh.hide()
        self.lbl.show()
        self.refresh_timer = QTimer()
        self.refresh_timer.setInterval(1000)  # 1000 ms = 1 s
        self.refresh_timer.timeout.connect(self.update_label)
        self.refresh_timer.start()
        self.worker = Worker()
        self.worker.finished.connect(self.finish_refresh)
        self.worker.start()

    def update_label(self):
        self.refresh_counter += 1

        refresh_text = self.default_refresh_text
        refresh_text += f"\nit runs for {self.refresh_counter} sec \n"
        if self.refresh_counter > 8:  # i just choosed 8; no sense
            refresh_text += "\nrefresh taking longer then usual probably it inits sys-whonix\n"

        self.lbl.setText(refresh_text)

    def details_clicked(widget, state):
        sending_widget = widget.sender()
        name = (sending_widget.accessibleName())
        desc = widget.outputs[name]['description']
        w.lbl.setText(desc)

    def install_tasks(widget, state):
        update_cmd = "sudo qubes-dom0-update "
        prefix = "3isec-qubes-"
        checked_buttons = [i for i, button in enumerate(w.taskGroup.buttons()) if button.isChecked()]
        pkgs_to_install = []
        for i in checked_buttons:
            pkgs_to_install.append(prefix + w.taskGroup.buttons()[i].text())
        try:
            if len(pkgs_to_install) == 0:
                QtWidgets.QMessageBox.warning(
                    widget,
                    widget.tr("No selected tasks"),
                    widget.tr("No tasks were selected"))
                return
            install_list = " ".join(pkgs_to_install)
            child = subprocess.Popen(update_cmd + install_list, shell=True)
            output = child.communicate()[0]
        except Exception as e:  # pylint: disable=broad-except
            # output = child.communicate()[0]
            return 1
        return 0

    def update_on_start(self):
        with shelve.open(self.fancy_state_path) as db:
            if 'update_on_start' in db:
                return db['update_on_start']
            return False

    def set_update_on_start(self, value):
        print(value)
        with shelve.open(self.fancy_state_path) as db:
            db['update_on_start'] = bool(value)  # need stronger validation

    def add_in_options(self):
        desktop_entry = """[Desktop Entry]
        Version=1.0
        Type=Application
        Name=qubes-fancy-task
        GenericName=qubes-fancy-task
        Comment=An enthusiast's version of QubesOS task manager
        Exec={}
        Icon=qubes-manager
        Terminal=false
        Categories=QubesTools;
        """
        if getattr(sys, 'frozen', False):
            # The application is run as a bundle (created by PyInstaller)
            executable_path = sys.executable
        else:
            # The application is run as a script
            executable_path = os.path.realpath(__file__)

        # Create the desktop entry content
        desktop_entry = desktop_entry.format(executable_path)

        # Create the desktop entry file
        desktop_entry_file = os.path.join(self.fancy_directory, 'qubes-task-manager.desktop')

        # # Write the script to ~/.qubes-fancy-manager
        # with open(custom_program_path, 'w') as f:
        #     f.write(open(__file__).read())

        # Make the script executable
        # os.chmod(custom_program_path, 0o755)

        # Write the desktop entry to the file
        with open(desktop_entry_file, 'w') as f:
            f.write(desktop_entry)

        # Create a symlink in /usr/share/applications
        os.system(f'sudo ln -s {desktop_entry_file} /usr/share/applications/qubes-fancy-manager.desktop')

        # Restart the Qubes panel to apply the changes
        os.system('xfce4-panel --restart')

    def windows_install(self):
        run_id = "task_" + random_string(10)
        name = str(self.nameWind.text())

        if len(name) == 0:
            QtWidgets.QMessageBox.warning(
                self,
                self.tr("Input error"),
                self.tr("Name is empty"))
            return

        installation_id = self.windowsInstallationBox.currentData()
        if self.windowsInstallationBox.currentData() == self.default_inst:
            QtWidgets.QMessageBox.warning(
                self,
                self.tr("Input error"),
                self.tr("Choose installation"))
            return

        netvm = getattr(appl, 'default_netvm', None)
        if self.netvmBox.currentIndex() != 0:
            netvm = self.netvmBox.currentData()

        label = self.colorLabelWindowsVMBox.currentData()
        default_dispvm = getattr(appl, 'default_dispvm', None)
        if self.workerTempateBox.currentIndex() != 0:
            default_dispvm = self.workerTempateBox.currentData()
        scripts = self.windows_installation(installation_id, run_id, default_dispvm, name, netvm, label)
        self.live_shell_dialog = LiveShellDialog(parent=self)
        self.live_shell_dialog.setWindowTitle("Live Output")

        self.live_shell_dialog.show()
        self.live_shell_dialog.run_script(scripts)

    def windows_installation(self, w_inst, run_id, default_dispvm, w_name, w_net_vm, label):
        repo = "https://github.com/qubes-fancy-manager/qvm-create-windows-qube"
        repo_branch = "qubes-fancy-manager"

        w_packages = "firefox"

        steps, disposable_name = self.disp_wrap(default_dispvm, run_id)

        installation_prepare = """

        #!/bin/bash
        # Copyright (C) 2021 Elliot Killick <elliotkillick@zohomail.eu>
        # Licensed under the MIT License. See LICENSE file for details.

        error() {
            exit_code="$?"
            echo -e "${RED}[!]${NC} An unexpected error has occurred! Exiting..." >&2
            exit "$exit_code"
        }

        trap error ERR

        RED='\033[0;31m'
        BLUE='\033[0;34m'
        GREEN='\033[0;32m'
        NC='\033[0m'

        # Step 3
        if [ -f "/usr/lib/qubes/qubes-windows-tools.iso" ]; then
            echo -e "${BLUE}[i]${NC} Qubes Windows Tools is already installed in Dom0. Skipping download..." >&2
        else
            echo -e "${BLUE}[i]${NC} Installing Qubes Windows Tools..." >&2
            if ! sudo qubes-dom0-update -y qubes-windows-tools; then
                echo -e "${RED}[!]${NC} Error installing Qubes Windows Tools! Exiting..." >&2
                exit 1
            fi
            if ! [ -f "/usr/lib/qubes/qubes-windows-tools.iso" ]; then
                echo -e "${RED}[!]${NC} Qubes Windows Tools package is installed, but /usr/lib/qubes/qubes-windows-tools.iso is still missing in Dom0. Exiting..." >&2
                exit 1
            fi
        fi

        echo -e "${BLUE}[i]${NC} Installing package dependencies on $template..." >&2
        fedora_packages="genisoimage geteltorito datefudge"
        debian_packages="genisoimage curl datefudge"
        script='if grep -q '\''ID=fedora'\'' /etc/os-release; then
          sudo dnf -y install '"$fedora_packages"'
        elif grep -q '\''ID=debian'\'' /etc/os-release; then
          sudo apt-get -y install '"$debian_packages"'
        else
          echo "Unsupported distribution."
          exit 1
        fi'
        """ + f"""
        qvm-run -p "{disposable_name}" "$script"
        """ + """

        echo -e "${BLUE}[i]${NC} Cloning qvm-create-windows-qube GitHub repository..." >&2
        """ + f"""
        resources_dir="/home/user/Documents/qvm-create-windows-qube"
        qvm-run -p "{disposable_name}" "cd {"${resources_dir%/*}"} && git clone --branch {repo_branch} {repo}"

        """ + """

        echo -e "${BLUE}[i]${NC} Please check for a \"Good signature\" from GPG (Verify it out-of-band if necessary)..." >&2
        """ + f"""
        qvm-run -p "{disposable_name}" "cd '$resources_dir' && gpg --import author.asc && git verify-commit \$(git rev-list --max-parents=0 HEAD)"

        qvm-run -p --filter-escape-chars --no-color-output "{disposable_name}" "cat '$resources_dir/qvm-create-windows-qube'" | sudo tee /usr/bin/qvm-create-windows-qube > /dev/null

        # Allow execution of script
        sudo chmod +x /usr/bin/qvm-create-windows-qube

        """ + """
        echo -e "${GREEN}[+]${NC} Installation complete!"


        """ + f"""

                qvm-run -p "{disposable_name}" "cd '$resources_dir'/windows-media/isos && ./download-windows.sh '{w_inst}'"
                echo "START WINDOWS INSTALLATION"
                qvm-create-windows-qube --resources-qube "{disposable_name}" -n {w_net_vm} -oyp {w_packages} -i {w_inst}.iso -a {w_inst}.xml {w_name}


                """

        return [steps[0], get_step(installation_prepare, False), steps[1]]

    def disp_wrap(self, disp_vm, run_id):

        template_name = f"{run_id}_tmpl"
        disposable_name = f"{run_id}_disp"

        create_disposable = f"""

            # Create a template from the default disposable template
            qvm-clone "{disp_vm}" "{template_name}"
            qvm-volume extend "{template_name}:private" 10GiB || true

            # Create a disposable qube from the template
            qvm-create --disp --template "{template_name}" "{disposable_name}"

        """

        remove_disposable = f"""

            # Wait for the disposable qube to shut down
            qvm-shutdown --wait "{disposable_name}"
            # Remove the disposable qube and template
            qvm-remove -f "{disposable_name}"

        """

        return [get_step(create_disposable, False), get_step(remove_disposable, True)], disposable_name


app = QtWidgets.QApplication(sys.argv)
w = MainWindow()
w.show()
sys.exit(app.exec_())
